/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package main.java.com.pbs;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintStream;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;

/**
 *
 * @author ryan.clark
 */
public class ChooseFileUI extends javax.swing.JFrame {

    private boolean fileSelected = false, branchFileSelected = false, outputFileSelected = false;
    private File file, branchesFile, outputFile;
    private ArrayList<ArrayList> topList = new ArrayList<>();

    /**
     * Creates new form ChooseFileUI
     */
    public ChooseFileUI() {

        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        analyzeButton = new javax.swing.JButton();
        browseButton = new javax.swing.JButton();
        csvTextField = new javax.swing.JTextField();
        outputTextField = new javax.swing.JTextField();
        outputButton = new javax.swing.JButton();
        progressBar = new javax.swing.JProgressBar();
        branchButton = new javax.swing.JButton();
        branchTextField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Call Analyzer"));

        analyzeButton.setText("Analyze");
        analyzeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                analyzeButtonActionPerformed(evt);
            }
        });

        browseButton.setText("Browse");
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });

        csvTextField.setText("Choose input file");
        csvTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                csvTextFieldActionPerformed(evt);
            }
        });

        outputTextField.setText("Output location");

        outputButton.setText("Browse");
        outputButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                outputButtonActionPerformed(evt);
            }
        });

        branchButton.setText("Browse");
        branchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                branchButtonActionPerformed(evt);
            }
        });

        branchTextField.setText("Choose branch csv");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(analyzeButton)
                .addGap(97, 97, 97))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(outputTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(outputButton)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(csvTextField)
                            .addComponent(branchTextField))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(branchButton)
                            .addComponent(browseButton))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(csvTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browseButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(branchButton)
                    .addComponent(branchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(outputButton)
                    .addComponent(outputTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(analyzeButton)
                .addGap(13, 13, 13))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void csvTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_csvTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_csvTextFieldActionPerformed

    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
        final JFileChooser fc = new JFileChooser();

        int returnVal = fc.showOpenDialog(ChooseFileUI.this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            file = fc.getSelectedFile();
            csvTextField.setText(file.getAbsolutePath());
            fileSelected = true;
        }
    }//GEN-LAST:event_browseButtonActionPerformed

    private void analyzeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_analyzeButtonActionPerformed
        progressBar.setValue(0);
        progressBar.setStringPainted(true);

        if (fileSelected == false) {

        } else {
            try {
                createLists();
                BufferedReader reader = new BufferedReader(new FileReader(file));
                String nextLine;
                reader.readLine();
                while ((nextLine = reader.readLine()) != null) {
                    countCalls(new Call(nextLine));
                }
                progressBar.setValue(progressBar.getValue() + 50);
                exportCalls();
            } catch (IOException ex) {
                Logger.getLogger(ChooseFileUI.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ParseException ex) {
                Logger.getLogger(ChooseFileUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_analyzeButtonActionPerformed

    private void outputButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_outputButtonActionPerformed
        final JFileChooser fc = new JFileChooser();

        int returnVal = fc.showOpenDialog(ChooseFileUI.this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            outputFile = fc.getSelectedFile();
            outputTextField.setText(outputFile.getAbsolutePath());
            outputFileSelected = true;
        }
    }//GEN-LAST:event_outputButtonActionPerformed

    private void branchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_branchButtonActionPerformed
        final JFileChooser fc = new JFileChooser();

        int returnVal = fc.showOpenDialog(ChooseFileUI.this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            branchesFile = fc.getSelectedFile();
            branchTextField.setText(branchesFile.getAbsolutePath());
            branchFileSelected = true;
        }
    }//GEN-LAST:event_branchButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ChooseFileUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ChooseFileUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ChooseFileUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ChooseFileUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ChooseFileUI().setVisible(true);
            }
        });

    }

    private void countCalls(Call call) throws ParseException {
        boolean checkDate = true;
        Calendar callDay = Calendar.getInstance();
        callDay.setTime(call.getDate());

        Calendar weekdayEnd = Calendar.getInstance();
        weekdayEnd.setTime(call.getDate());
        weekdayEnd.set(Calendar.HOUR_OF_DAY, 17);
        weekdayEnd.set(Calendar.MINUTE, 30);

        Calendar weekdayStart = Calendar.getInstance();
        weekdayStart.setTime(call.getDate());
        weekdayStart.set(Calendar.HOUR_OF_DAY, 7);
        weekdayStart.set(Calendar.MINUTE, 00);

        Calendar weekendEnd = Calendar.getInstance();
        weekendEnd.setTime(call.getDate());
        weekendEnd.set(Calendar.HOUR_OF_DAY, 12);
        weekendEnd.set(Calendar.MINUTE, 30);

        Calendar weekendStart = Calendar.getInstance();
        weekendStart.setTime(call.getDate());
        weekendStart.set(Calendar.HOUR_OF_DAY, 8);
        weekendStart.set(Calendar.MINUTE, 00);

        if (callDay.get(Calendar.DAY_OF_WEEK) == Calendar.SUNDAY) {
            checkDate = false;
        }

        if ((callDay.get(Calendar.DAY_OF_WEEK) == Calendar.SATURDAY) && (callDay.getTime().before(weekendStart.getTime()) || callDay.getTime().after(weekendEnd.getTime()))) {
            checkDate = false;
        }

        if ((callDay.get(Calendar.DAY_OF_WEEK) != Calendar.SATURDAY) && (callDay.get(Calendar.DAY_OF_WEEK) != Calendar.SUNDAY) && ((callDay.getTime().before(weekdayStart.getTime()) || callDay.getTime().after(weekdayEnd.getTime())))) {
            checkDate = false;
        }
        if (checkDate == true) {
            if (call.getOutcome().equals("Answered")) {
                for (int i = 0; i <= topList.size() - 1; i++) {
                    if ((topList.get(i).get(0).toString()).equals(call.getBranch())) {
                        int ansCount = Integer.valueOf((String) topList.get(i).get(2));
                        ansCount++;
                        topList.get(i).set(2, Integer.toString(ansCount));
                    }
                }
            } else if (call.getOutcome().equals("Unanswered")) {
                for (int i = 0; i <= topList.size() - 1; i++) {
                    if ((topList.get(i).get(0).toString()).equals(call.getBranch())) {
                        int ansCount = Integer.valueOf((String) topList.get(i).get(3));
                        ansCount++;
                        topList.get(i).set(3, Integer.toString(ansCount));
                    }
                }
            }
        }
    }

    private void createLists() {
        BufferedReader reader;
        try {
            reader = new BufferedReader(new FileReader(branchesFile));
            String nextLine;

            while ((nextLine = reader.readLine()) != null) {
                String[] inputSplit = nextLine.split(",");
                ArrayList<String> list = new ArrayList<>();
                list.add(inputSplit[0]);
                list.add(inputSplit[1]);
                list.add("0");
                list.add("0");
                topList.add(list);
            }

        } catch (FileNotFoundException ex) {
            Logger.getLogger(ChooseFileUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(ChooseFileUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void exportCalls() throws FileNotFoundException {
        PrintStream writer = new PrintStream(outputFile);
        writer.println("Branch,Answered,Unanswered,% Missed");
        for (int i = 0; i <= topList.size() - 1; i++) {
            double perMissed = 0;
            if (((Integer.valueOf((String) topList.get(i).get(2))) + (Integer.valueOf((String) topList.get(i).get(3)))) != 0) {
                perMissed = 100 * (Double.valueOf((String) topList.get(i).get(3)) / ((Double.valueOf((String) topList.get(i).get(2))) + (Double.valueOf((String) topList.get(i).get(3)))));
                writer.println(topList.get(i).get(1) + "," + topList.get(i).get(2) + "," + topList.get(i).get(3) + "," + perMissed);
            }
        }
        progressBar.setValue(progressBar.getValue() + 50);
        progressBar.setString("Complete!");
        writer.close();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton analyzeButton;
    private javax.swing.JButton branchButton;
    private javax.swing.JTextField branchTextField;
    private javax.swing.JButton browseButton;
    private javax.swing.JTextField csvTextField;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton outputButton;
    private javax.swing.JTextField outputTextField;
    private javax.swing.JProgressBar progressBar;
    // End of variables declaration//GEN-END:variables
}
